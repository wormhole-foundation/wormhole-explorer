---         
apiVersion: v1
kind: Service
metadata:
  name: {{ .NAME }}-source-events-3
  namespace: {{ .NAMESPACE }}
  labels:
    app: {{ .NAME }}-source-events-3
spec:
  selector:
    app: {{ .NAME }}-source-events-3
  ports:
    - port: {{ .PORT }}
      targetPort: {{ .PORT }}
      name: {{ .NAME }}-source-events-3
      protocol: TCP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: blockchain-watcher-source-events-3-pvc
  namespace: {{ .NAMESPACE }}
  labels:
    app: {{ .NAME }}-source-events-3
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  storageClassName: gp2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .NAME }}-source-events-3-jobs
  namespace: {{ .NAMESPACE }}
  labels:
    app: {{ .NAME }}-source-events-3
data:
  testnet-jobs.json: |-
    [
      {
        "id": "poll-log-message-published-sui-immediate",
        "chain": "sui",
        "source": {
          "action": "PollSuiTransactions",
          "repository": "suiRepo",
          "config": {
            "interval": 5000,
            "environment": "testnet",
            "chain": "sui",
            "filter": {
              "MoveFunction": {
                "package": "0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94",
                "module": "publish_message",
                "function": "publish_message"
              }
            }
          }
        },
        "handlers": [
          {
            "action": "HandleSuiTransactions",
            "target": "sns",
            "mapper": "suiLogMessagePublishedMapper",
            "config": {
              "eventTypes": [
                "0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94::publish_message::WormholeMessage"
              ],
              "metricName": "process_source_event"
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-aptos-finalized",
        "chain": "aptos",
        "source": {
          "action": "PollAptos",
          "repository": "aptosRepo",
          "config": {
            "limitBatchSize": 100,
            "commitment": "finalized",
            "environment": "testnet",
            "interval": 25000,
            "addresses": ["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625"],
            "chain": "aptos",
            "chainId": 22,
            "filters": [
              {
                "fieldName": "event",
                "address": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
                "event": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessageHandle",
                "type": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessage"
              }
            ]
          }
        },
        "handlers": [
          {
            "action": "HandleAptosTransactions",
            "target": "sns",
            "mapper": "aptosLogMessagePublishedMapper",
            "config": {
              "abis": [
                {
                  "abi": "event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel)",
                  "topic": "0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2",
                  "type": "Portal Token Bridge"
                }
              ],
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-aptos",
                "chain": "aptos",
                "commitment": "finalized"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-algorand-latest",
        "chain": "algorand",
        "source": {
          "action": "PollAlgorand",
          "repository": "algorandRepo",
          "config": {
            "blockBatchSize": 100,
            "commitment": "latest",
            "environment": "testnet",
            "interval": 25000,
            "applicationIds": ["86525623"],
            "chain": "algorand",
            "chainId": 8
          }
        },
        "handlers": [
          {
            "action": "HandleAlgorandTransactions",
            "target": "sns",
            "mapper": "algorandLogMessagePublishedMapper",
            "config": {
              "metricName": "process_source_event",
              "filter": [
                {
                  "applicationIds": "86525623",
                  "applicationAddress": "C2SZBD4ZFFDXANBCUTG5GBUEWMQ34JS5LFGDRTEVJBAXDRF6ZWB7Q4KHHM"
                }
              ],
              "metricLabels": {
                "job": "poll-log-message-published-algorand",
                "chain": "algorand",
                "commitment": "latest"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-snaxchain-latest",
        "chain": "snaxchain",
        "source": {
            "action": "PollEvm",
            "repository": "evmRepo",
            "config": {
                "blockBatchSize": 100,
                "commitment": "latest",
                "environment": "testnet",
                "interval": 15000,
                "filters": [
                  {
                    "addresses": ["0xBB73cB66C26740F31d1FabDC6b7A46a038A300dd"],
                    "type": "Portal Token Bridge",
                    "topics": ["0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2"]
                  }
                ],
                "chain": "snaxchain",
                "chainId": 43
            }
        },
        "handlers": [
            {
                "action": "HandleEvmLogs",
                "target": "sns",
                "mapper": "evmLogMessagePublishedMapper",
                "config": {
              "abis": [
                {
                  "abi": "event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel)",
                  "topic": "0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2",
                  "type": "Portal Token Bridge"
                }
              ],
                    "metricName": "process_source_event"
                }
            }
        ]
      }
    ]
  mainnet-jobs.json: |-
    [
      {
        "id": "poll-log-message-published-sui-immediate",
        "chain": "sui",
        "source": {
          "action": "PollSuiTransactions",
          "repository": "suiRepo",
          "config": {
            "interval": 5000,
            "chain": "sui",
            "environment": "mainnet",
            "filter": {
              "MoveFunction": {
                "package": "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
                "module": "publish_message",
                "function": "publish_message"
              }
            }
          }
        },
        "handlers": [
          {
            "action": "HandleSuiTransactions",
            "target": "sns",
            "mapper": "suiLogMessagePublishedMapper",
            "config": {
              "eventTypes": [
                "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::publish_message::WormholeMessage"
              ],
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-sui",
                "chain": "sui",
                "commitment": "immediate"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-aptos-finalized",
        "chain": "aptos",
        "source": {
          "action": "PollAptos",
          "repository": "aptosRepo",
          "config": {
            "limitBatchSize": 100,
            "commitment": "finalized",
            "interval": 15000,
            "environment": "mainnet",
            "addresses": ["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625"],
            "chain": "aptos",
            "chainId": 22,
            "filters": [
              {
                "fieldName": "event",
                "address": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
                "event": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessageHandle",
                "type": "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessage"
              }
            ]
          }
        },
        "handlers": [
          {
            "action": "HandleAptosTransactions",
            "target": "sns",
            "mapper": "aptosLogMessagePublishedMapper",
            "config": {
              "abis": [
                {
                  "abi": "event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel)",
                  "topic": "0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2",
                  "type": "Portal Token Bridge"
                }
              ],
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-aptos",
                "chain": "aptos",
                "commitment": "finalized"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-algorand-latest",
        "chain": "algorand",
        "source": {
          "action": "PollAlgorand",
          "repository": "algorandRepo",
          "config": {
            "blockBatchSize": 100,
            "environment": "mainnet",
            "commitment": "latest",
            "interval": 15000,
            "applicationIds": ["842125965"],
            "chain": "algorand",
            "chainId": 8
          }
        },
        "handlers": [
          {
            "action": "HandleAlgorandTransactions",
            "target": "sns",
            "mapper": "algorandLogMessagePublishedMapper",
            "config": {
              "metricName": "process_source_event",
              "filter": [
                {
                  "applicationIds": "842125965",
                  "applicationAddress": "J476J725L4JTOI2YU6DAI4E23LYUECLZR7RCYZ3LK6QFHX4M54ZI53SGXQ"
                }
              ],
              "metricLabels": {
                "job": "poll-log-message-published-algorand",
                "chain": "algorand",
                "commitment": "latest"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-terra-immediate",
        "chain": "terra",
        "source": {
          "action": "PollCosmos",
          "repository": "cosmosRepo",
          "config": {
            "blockBatchSize": 100,
            "commitment": "immediate",
            "environment": "mainnet",
            "interval": 60000,
            "filter": {
              "addresses": [
                "terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5"
              ]
            },
            "chain": "terra",
            "chainId": 3
          }
        },
        "handlers": [
          {
            "action": "HandleCosmosTransactions",
            "target": "sns",
            "mapper": "cosmosLogMessagePublishedMapper",
            "config": {
              "filter": {
                "addresses": [
                  "terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5"
                ]
              },
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-terra",
                "chain": "terra",
                "commitment": "immediate"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-terra2-immediate",
        "chain": "terra2",
        "source": {
          "action": "PollCosmos",
          "repository": "cosmosRepo",
          "config": {
            "blockBatchSize": 100,
            "commitment": "immediate",
            "environment": "mainnet",
            "interval": 60000,
            "filter": {
              "addresses": [
                "terra12mrnzvhx3rpej6843uge2yyfppfyd3u9c3uq223q8sl48huz9juqffcnhp"
              ]
            },
            "chain": "terra2",
            "chainId": 18
          }
        },
        "handlers": [
          {
            "action": "HandleCosmosTransactions",
            "target": "sns",
            "mapper": "cosmosLogMessagePublishedMapper",
            "config": {
              "filter": {
                "addresses": [
                  "terra12mrnzvhx3rpej6843uge2yyfppfyd3u9c3uq223q8sl48huz9juqffcnhp"
                ]
              },
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-terra2",
                "chain": "terra2",
                "commitment": "immediate"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-xpla-immediate",
        "chain": "xpla",
        "source": {
          "action": "PollCosmos",
          "repository": "cosmosRepo",
          "config": {
            "blockBatchSize": 50,
            "commitment": "immediate",
            "environment": "mainnet",
            "interval": 60000,
            "filter": {
              "addresses": [
                "xpla1jn8qmdda5m6f6fqu9qv46rt7ajhklg40ukpqchkejcvy8x7w26cqxamv3w"
              ]
            },
            "chain": "xpla",
            "chainId": 28
          }
        },
        "handlers": [
          {
            "action": "HandleCosmosTransactions",
            "target": "sns",
            "mapper": "cosmosLogMessagePublishedMapper",
            "config": {
              "filter": {
                "addresses": [
                  "xpla1jn8qmdda5m6f6fqu9qv46rt7ajhklg40ukpqchkejcvy8x7w26cqxamv3w"
                ]
              },
              "metricName": "process_source_event",
              "metricLabels": {
                "job": "poll-log-message-published-xpla",
                "chain": "xpla",
                "commitment": "immediate"
              }
            }
          }
        ]
      },
      {
        "id": "poll-log-message-published-snaxchain-latest",
        "chain": "snaxchain",
        "source": {
            "action": "PollEvm",
            "repository": "evmRepo",
            "config": {
                "blockBatchSize": 100,
                "commitment": "latest",
                "environment": "mainnet",
                "interval": 5000,
                "filters": [
                  {
                    "addresses": ["0xc1BA3CC4bFE724A08FbbFbF64F8db196738665f4"],
                    "type": "Portal Token Bridge",
                    "topics": ["0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2"]
                  }
                ],
                "chain": "snaxchain",
                "chainId": 43
            }
        },
        "handlers": [
            {
                "action": "HandleEvmLogs",
                "target": "sns",
                "mapper": "evmLogMessagePublishedMapper",
                "config": {
                    "abis": [
                      {
                        "abi": "event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel)",
                        "topic": "0x6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2",
                        "type": "Portal Token Bridge"
                      }
                    ],
                    "metricName": "process_source_event"
                }
            }
        ]
      }
    ]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .NAME }}-source-events-3
  namespace: {{ .NAMESPACE }}
  labels:
    app: {{ .NAME }}-source-events-3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .NAME }}-source-events-3
  strategy: # Rolling update strategy for restarting the pods
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ .NAME }}-source-events-3
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .PORT }}"
    spec:
      containers:
        - name: {{ .NAME }}
          image: {{ .IMAGE_NAME }} # Docker image
          env:
            - name: NODE_ENV
              value: {{ .NODE_ENV }}
            - name: PORT
              value: "{{ .PORT }}"
            - name: LOG_LEVEL
              value: {{ .LOG_LEVEL }}
            - name: BLOCKCHAIN_ENV
              value: {{ .BLOCKCHAIN_ENV }}
            - name: DRY_RUN_ENABLED
              value: "{{ .DRY_RUN_ENABLED }}"
            - name: SNS_TOPIC_ARN
              value: {{ .SNS_TOPIC_ARN }}
            - name: SNS_REGION
              value: {{ .SNS_REGION }}
            - name: JOBS_DIR
              value: /home/node/app/jobs
            {{ if .SUI_RPCS }}
            - name: SUI_RPCS
              value: '{{ .SUI_RPCS }}'
            {{ end }}
            {{ if .APTOS_RPCS }}
            - name: APTOS_RPCS
              value: '{{ .APTOS_RPCS }}'
            {{ end }}
            {{ if .ALGORAND_RPCS }}
            - name: ALGORAND_RPCS
              value: '{{ .ALGORAND_RPCS }}'
            {{ end }}
            {{ if .SNAXCHAIN_RPCS }}
            - name: SNAXCHAIN_RPCS
              value: '{{ .SNAXCHAIN_RPCS }}'
            {{ end }}
          resources:
            limits:
              cpu: {{ .RESOURCES_LIMITS_CPU }}
              memory: {{ .RESOURCES_LIMITS_MEMORY }}
            requests:
              cpu: {{ .RESOURCES_REQUESTS_CPU }}
              memory: {{ .RESOURCES_REQUESTS_MEMORY }}
          volumeMounts:
            - name: metadata-volume
              mountPath: /home/node/app/metadata-repo 
            - name: jobs-volume
              mountPath: /home/node/app/jobs
      restartPolicy: Always
      serviceAccountName: blockchain-watcher
      terminationGracePeriodSeconds: 30
      volumes:
        - name: metadata-volume
          persistentVolumeClaim:
            claimName: blockchain-watcher-source-events-3-pvc
        - name: jobs-volume
          configMap:
            name: {{ .NAME }}-source-events-3-jobs
            items:
              - key: {{ .BLOCKCHAIN_ENV }}-jobs.json
                path: jobs.json